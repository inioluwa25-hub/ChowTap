AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template for Authorizer

Parameters:
  AppName:
    Type: String
  Stage:
    Type: String
  ServiceName:
    Type: String
  AwsLambdaPowertoolsPythonLayer:
    Type: String
    
Globals:
  Function:
    Timeout: 300
    MemorySize: 1024
    Layers:
      - !Ref PythonRequirementsLayer
      - !Ref UtilsLayer
      - !Ref AwsLambdaPowertoolsPythonLayer
    Runtime: python3.10
    Tracing: Active
    Architectures:
      - x86_64
    Environment:
      Variables:
        APP_NAME: !Ref AppName
        STAGE: !Ref Stage

Resources:
  AuthorizerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"
        - "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  AuthorizerApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-${Stage}-${ServiceName}-api-gateway-role"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AppName}-${Stage}-${ServiceName}-api-gateway-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt AuthorizerFunction.Arn

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Stage}-${ServiceName}-Authorizer-function"
      Handler: main.handler
      CodeUri: ./src/authorizer/
      Role: !GetAtt AuthorizerServiceRole.Arn
      Description: A simple Lambda function for authorization.

  AuthorizerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AuthorizerFunction}"
      RetentionInDays: 14

  PythonRequirementsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AppName}-${Stage}-${ServiceName}-python-requirements"
      Description: Dependencies for the auth service Lambda function
      ContentUri: dependencies/requirements/
      CompatibleRuntimes:
        - python3.9
      LicenseInfo: MIT
    Metadata:
      BuildMethod: python3.10

  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AppName}-${Stage}-${ServiceName}-utils-layer"
      Description: Utility functions for Lambda
      ContentUri: ./dependencies/utils/
    Metadata:
      BuildMethod: python3.10

  AuthorizerApiGateway:
    Type: AWS::Serverless::Application
    Properties:
      Location: api.yml
      Parameters:
        AppName: !Ref AppName
        Stage: !Ref Stage
        ServiceName: !Ref ServiceName
        AuthorizerApiGatewayRoleArn: !GetAtt AuthorizerApiGatewayRole.Arn
        AuthorizerFunctionArn: !GetAtt AuthorizerFunction.Arn

Outputs:
  AuthorizerFunctionArn:
    Description: "Authorizer Function ARN"
    Value: !GetAtt AuthorizerFunction.Arn