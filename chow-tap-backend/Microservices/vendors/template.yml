AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template for Vendors on the application with Cognito Authorizer

Parameters:
  AppName:
    Type: String
  Stage:
    Type: String
  ServiceName:
    Type: String
  AwsLambdaPowertoolsPythonLayer:
    Type: String
    
Globals:
  Function:
    Timeout: 300
    MemorySize: 1024
    Layers:
      - !Ref PythonRequirementsLayer
      - !Ref UtilsLayer
      - !Ref AwsLambdaPowertoolsPythonLayer
    Runtime: python3.10
    Tracing: Active
    Architectures:
      - x86_64
    Environment:
      Variables:
        APP_NAME: !Ref AppName
        STAGE: !Ref Stage

Resources:
  VendorServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-${Stage}-${ServiceName}-vendor-role"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${AppName}-${Stage}-${ServiceName}-vendor-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # Cognito permissions
              - Effect: Allow
                Action:
                  - cognito-idp:InitiateAuth
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:ListUsers
                  - cognito-idp:RespondToAuthChallenge
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminDisableUser
                Resource: "*"
              
              # SSM Parameter Store permissions
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/chow-tap/${Stage}/POOL_ID"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/chow-tap/${Stage}/CLIENT_ID"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/chow-tap/${Stage}/CLIENT_SECRET"
              
              # KMS permissions
              - Effect: Allow 
                Action:
                  - kms:Decrypt
                Resource: "*"
              
              # DynamoDB permissions
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/chow-tap-${Stage}-main-table"
                  - !Sub "arn:aws:dynamo--table/chow-tap-${Stage}-main-table/index/*"

  VendorApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-${Stage}-${ServiceName}-api-gateway-role"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AppName}-${Stage}-${ServiceName}-api-gateway-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: 
                  - !GetAtt CreateVendorFunction.Arn
                  - !GetAtt GetVendorFunction.Arn
                  - !GetAtt GetVendorIdFunction.Arn
                  - !GetAtt ListVendorsFunction.Arn
                  - !GetAtt VendorRatingFunction.Arn
                  - !GetAtt CreateFavoriteFunction.Arn
                  - !GetAtt ListFavoriteFunction.Arn

  CreateFavoriteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Stage}-${ServiceName}-create-favorite-function"
      Handler: main.handler
      CodeUri: ./src/favorite-vendor/create-favorite/
      Role: !GetAtt VendorServiceRole.Arn
      Description: Create favorites on the application
      Events:
        CreateFavorite:
          Type: Api
          Properties:
            Path: /create-favorite
            Method: POST
            RestApiId: !Ref VendorApi
            Auth:
              Authorizer: CognitoAuthorizer

  ListFavoriteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Stage}-${ServiceName}-list-favorite-function"
      Handler: main.handler
      CodeUri: ./src/favorite-vendor/list-favorite/
      Role: !GetAtt VendorServiceRole.Arn
      Description: List favorites on the application
      Events:
        ListFavorite:
          Type: Api
          Properties:
            Path: /list-favorite
            Method: POST
            RestApiId: !Ref VendorApi
            Auth:
              Authorizer: CognitoAuthorizer

  CreateVendorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Stage}-${ServiceName}-create-vendor-function"
      Handler: main.handler
      CodeUri: ./src/create-vendor/
      Role: !GetAtt VendorServiceRole.Arn
      Description: Create vendors on the application
      Events:
        CreateVendor:
          Type: Api
          Properties:
            Path: /create-vendor
            Method: POST
            RestApiId: !Ref VendorApi
            Auth:
              Authorizer: CognitoAuthorizer

  GetVendorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Stage}-${ServiceName}-get-vendor-function"
      Handler: main.handler
      CodeUri: ./src/get-vendor/
      Role: !GetAtt VendorServiceRole.Arn
      Description: Get vendors on the application
      Events:
        GetVendor:
          Type: Api
          Properties:
            Path: /get-vendor
            Method: GET
            RestApiId: !Ref VendorApi
            Auth:
              Authorizer: CognitoAuthorizer

  GetVendorIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Stage}-${ServiceName}-get-vendor-id-function"
      Handler: main.handler
      CodeUri: ./src/get-vendor-id/
      Role: !GetAtt VendorServiceRole.Arn
      Description: Get vendors by id on the application
      Events:
        GetVendorId:
          Type: Api
          Properties:
            Path: /get-vendor-id
            Method: POST
            RestApiId: !Ref VendorApi
            Auth:
              Authorizer: CognitoAuthorizer

  VendorRatingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Stage}-${ServiceName}-vendor-rating-function"
      Handler: main.handler
      CodeUri: ./src/vendor-rating/
      Role: !GetAtt VendorServiceRole.Arn
      Description: Vendor rating on the application
      Events:
        GetVendorId:
          Type: Api
          Properties:
            Path: /vendor-rating
            Method: POST
            RestApiId: !Ref VendorApi
            Auth:
              Authorizer: CognitoAuthorizer

  ListVendorsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Stage}-${ServiceName}-list-vendor-function"
      Handler: main.handler
      CodeUri: ./src/list-vendor/
      Role: !GetAtt VendorServiceRole.Arn
      Description: List vendors on the application
      Events:
        ListVendors:
          Type: Api
          Properties:
            Path: /list-vendors
            Method: GET
            RestApiId: !Ref VendorApi
            Auth:
              Authorizer: NONE

  VendorApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Name: !Sub "${AppName}-${Stage}-${ServiceName}-vendor-api"
      TracingEnabled: true
      EndpointConfiguration: REGIONAL
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/us-east-1_N69lOUMSh
            Identity:
              Header: "Authorization"
      # Enhanced CORS Configuration
      Cors:
        AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amzn-Trace-Id,Accept,Referer,Sec-Ch-Ua,Sec-Ch-Ua-Mobile,Sec-Ch-Ua-Platform,User-Agent'"
        AllowOrigin: "'*'"
        AllowCredentials: false
        MaxAge: "'600'"
      # Additional Gateway Responses for CORS
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amzn-Trace-Id,Accept,Referer,Sec-Ch-Ua,Sec-Ch-Ua-Mobile,Sec-Ch-Ua-Platform,User-Agent'"
              Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amzn-Trace-Id,Accept,Referer,Sec-Ch-Ua,Sec-Ch-Ua-Mobile,Sec-Ch-Ua-Platform,User-Agent'"
              Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        UNAUTHORIZED:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amzn-Trace-Id,Accept,Referer,Sec-Ch-Ua,Sec-Ch-Ua-Mobile,Sec-Ch-Ua-Platform,User-Agent'"
              Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"

  PythonRequirementsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AppName}-${Stage}-${ServiceName}-python-requirements"
      Description: Dependencies for the auth service Lambda function
      ContentUri: dependencies/requirements/
      CompatibleRuntimes:
        - python3.9
      LicenseInfo: MIT
    Metadata:
      BuildMethod: python3.10

  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AppName}-${Stage}-${ServiceName}-utils-layer"
      Description: Utility functions for Lambda
      ContentUri: ./dependencies/utils/
    Metadata:
      BuildMethod: python3.10

  CreateVendorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CreateVendorFunction}"
      RetentionInDays: 14

  CreateFavoriteFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CreateFavoriteFunction}"
      RetentionInDays: 14

  ListFavoriteFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ListFavoriteFunction}"
      RetentionInDays: 14

  GetVendorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetVendorFunction}"
      RetentionInDays: 14

  GetVendorIdFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetVendorIdFunction}"
      RetentionInDays: 14
  
  ListVendorsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ListVendorsFunction}"
      RetentionInDays: 14

  VendorRatingFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${VendorRatingFunction}"
      RetentionInDays: 14

Outputs:
  CreateVendorFunctionArn:
    Description: "Create Vendor Function ARN"
    Value: !GetAtt CreateVendorFunction.Arn
  CreateFavoriteFunctionArn:
    Description: "Create Favorite Function ARN"
    Value: !GetAtt CreateFavoriteFunction.Arn
  ListFavoriteFunctionArn:
    Description: "List Favorites Function ARN"
    Value: !GetAtt ListFavoriteFunction.Arn
  GetVendorFunctionArn:
    Description: "Get Vendor Function ARN"
    Value: !GetAtt GetVendorFunction.Arn
  GetVendorIdFunctionArn:
    Description: "Get Vendor By ID Function ARN"
    Value: !GetAtt GetVendorIdFunction.Arn
  VendorRatingFunctionArn:
    Description: "Vendor Rating Function ARN"
    Value: !GetAtt VendorRatingFunction.Arn
  ListVendorsFunctionArn:
    Description: "List Vendors Function ARN"
    Value: !GetAtt ListVendorsFunction.Arn
  VendorApiEndpoint:
    Description: "Vendor API Endpoint URL"
    Value: !Sub "https://${VendorApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"